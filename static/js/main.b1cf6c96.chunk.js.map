{"version":3,"sources":["components/Menu/Menu.js","components/Header/Header.js","components/Products/Products.js","App.js","serviceWorker.js","index.js"],"names":["Menu","react_default","a","createElement","className","href","Component","Header","Products","state","users","isLoading","errors","_this2","this","axios","get","then","response","data","results","map","user","name","concat","first","last","username","login","email","image","picture","thumbnail","setState","catch","error","_this$state","key","src","alt","App","components_Menu_Menu","components_Header_Header","components_Products_Products","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b1cf6c96.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './menu.css'\r\n\r\nclass Menu extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"main-menu\">\r\n        <span className=\"brand\"> | Fashion Today |</span>\r\n        <ul>\r\n          <li className=\"menu-link\"><a href=\"/women\">Women</a></li>\r\n          <li className=\"menu-link\"><a href=\"/men\">Men</a></li>\r\n          <li className=\"menu-link\"><a href=\"/about\">About</a></li>\r\n          <li className=\"menu-link\"><a href=\"/support\">Support</a></li>\r\n          <li className=\"menu-link\"><a href=\"/qanda\">Q&A</a></li>\r\n        </ul>\r\n        <span className=\"shop-cart\"><i className=\"fas fa-cart-arrow-down fa-2x\"></i></span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Menu;\r\n","import React, { Component } from 'react'\r\nimport './header.css'\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"main-header\">\r\n        <div className=\"header\">\r\n        </div>\r\n        <div className=\"header-text\">\r\n          <h1>New Season Arrivals</h1>\r\n          <h4>Check out the new treds</h4>\r\n          <button className=\"header-button\">Shop now</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react'\r\n// import Product from './Product'\r\nimport axios from \"axios\";\r\n// import dataMen from '../Products/data/mendata.json'\r\nimport './products.css'\r\n\r\nclass Products extends Component {\r\n  state = {\r\n    users: [],\r\n    isLoading: true,\r\n    errors: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"https://randomuser.me/api/?results=5\")\r\n      .then(response =>\r\n        response.data.results.map(user => ({\r\n          name: `${user.name.first} ${user.name.last}`,\r\n          username: `${user.login.username}`,\r\n          email: `${user.email}`,\r\n          image: `${user.picture.thumbnail}`\r\n        }))\r\n      )\r\n      .then(users => {\r\n        this.setState({\r\n          users,\r\n          isLoading: false\r\n        });\r\n      })\r\n      .catch(error => this.setState({ error, isLoading: false }));\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, users } = this.state;\r\n    return (\r\n      <div>\r\n        <h2>Random Items</h2>\r\n        <div>\r\n          {!isLoading ? (\r\n            users.map(user => {\r\n              const { username, name, email, image } = user;\r\n              return (\r\n                <div key={username}>\r\n                  <p>{name}</p>\r\n                  <div>\r\n                    <img src={image} alt={name} />\r\n                  </div>\r\n                  <p>{email}</p>\r\n                  <hr />\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <p>Loading...</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Products;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Menu from './components/Menu/Menu';\nimport Header from './components/Header/Header';\nimport Products from './components/Products/Products';\n// import Brands from './components/Brands/Brands';\n// import Footer from './components/Footer/Footer';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Menu />\n        <Header />\n        <Products />\n        {/* <Brands /> */}\n        {/* <Footer /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}